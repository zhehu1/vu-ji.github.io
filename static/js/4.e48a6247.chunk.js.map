{"version":3,"sources":["pages/react/react-router/index.md","pages/react/react-router/index.tsx"],"names":["module","exports","ReactRouter","mdDoc"],"mappings":"2GAAAA,EAAOC,QAAU,2gF,iCCAjB,kDAQeC,UAJS,WACpB,OAAO,cAAC,IAAD,UAAeC","file":"static/js/4.e48a6247.chunk.js","sourcesContent":["module.exports = \"## React Route \\n\\n### 主要三类组建\\n- Routers(路由)， \\\\<BrowserRouter\\\\> 和 \\\\<HashRouter\\\\>\\n- Matchers(路由匹配器)，\\\\<Route\\\\> 和 \\\\<Switch\\\\>\\n- Navigation(导航)，\\\\<Link\\\\>、 \\\\<NavLink\\\\> 和 \\\\<Redirect\\\\>\\n\\n#### Routers\\n> 每种路由的核心都是一个路由组件。在web项目中`react-router-dom`提供了\\\\<BrowserRouter\\\\>和\\\\<HashRouter\\\\>两种路由方式，主要不同在于URL以及与服务器的交互方式。  \\n> 同时，使用路由时，要确保他们处于所呈现元素的根。\\n\\n##### BrowserRouter  \\n使用常规的URL，但需要进行服务器配置。需要对用户的访问返回同一个页面，具体的path交由`BrowserRouter`去处理具体展现\\n\\n##### HashRouter\\n页面的路由信息存储在hash部分，不需要对服务器做特殊配置即可使用\\n\\n#### Matchers\\n- Switch 包裹的 route 匹配到第一个后立即停止匹配。如果没有 route，什么都不渲染\\n- Route path 与 URL 的开头匹配而不是全匹配，exact 属性可以实现全匹配\\n\\n#### Navigation\\n- Link 会在 DOM 中渲染一个 \\\\<a\\\\>\\n- NavLink 当匹配时，会将自己设置为 active\\n- Redirect 重定向，当前path不会写入history\\n\\n### 服务端渲染\\n详细见<Link to=\\\"/react/ssr\\\">SSR</Link>\\n\\n### 动态加载（代码分割）\\nbabel 配置  \\n```\\n{\\n  \\\"presets\\\": [\\\"@babel/preset-react\\\"],\\n  \\\"plugins\\\": [\\\"@babel/plugin-syntax-dynamic-import\\\"]\\n}\\n```\\n\\n路由配置  \\n```\\nconst LoadableComponent = loadable(() => import(\\\"./Dashboard.js\\\"), {\\n  fallback: <Loading />\\n});\\n```\\n\\n### 结语\\n\\n\\n\\n### [\\\\<Route\\\\>](https://reactrouter.com/web/api/Route)\\n> component/render/children 渲染方式对比说明\\n\\n\\n\\n\";","import React, { FC } from 'react'\nimport AntdMarkdown from '@/components/antdMarkdown'\nimport mdDoc from './index.md'\n\nconst ReactRouter: FC = () => {\n    return <AntdMarkdown>{mdDoc}</AntdMarkdown>\n}\n\nexport default ReactRouter"],"sourceRoot":""}