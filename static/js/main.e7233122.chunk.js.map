{"version":3,"sources":["redux/reducers.js","redux/configureStore.js","reportWebVitals.ts","components/sider/index.tsx","components/layout/index.tsx","App.tsx","pages/index.tsx","router.ts","pages/babel/index.tsx","index.tsx"],"names":["createRootReducer","history","combineReducers","router","connectRouter","createHashHistory","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Sider","Layout","ComSider","props","useHistory","className","onClick","e","push","key","defaultSelectedKeys","defaultOpenKeys","mode","ItemGroup","Item","Title","Typography","Header","Content","ComLayout","level","children","App","route","renderRoutes","routes","routeConfig","component","path","exact","store","createStore","compose","applyMiddleware","routerMiddleware","ReactDOM","render","document","getElementById","console","log"],"mappings":"+PAOeA,EAJW,SAACC,GAAD,OAAaC,YAAgB,CACrDC,OAAQC,YAAcH,MCCXA,EAAUI,cCHvB,IDKuCC,ECOxBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oDCHNQ,EAAUC,IAAVD,MAwBOE,EAtBM,SAACC,GAClB,IAAIlB,EAAUmB,cAKd,OAAO,cAACJ,EAAD,CAAOK,UAAU,yBAAjB,SACH,cAAC,IAAD,CACIC,QALY,SAACC,GACjBtB,EAAQuB,KAAKD,EAAEE,MAKXC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBC,KAAK,SAJT,SAMI,eAAC,IAAKC,UAAN,WACI,cAAC,IAAKC,KAAN,0BAAe,KACf,cAAC,IAAKA,KAAN,mBAAe,YAFC,WChBxBC,G,OAAUC,IAAVD,OAEAE,EAAoBhB,IAApBgB,OAAQC,EAAYjB,IAAZiB,QAeDC,EAbO,SAAChB,GACnB,OAAO,eAAC,IAAD,CAAQE,UAAU,cAAlB,UACH,cAACY,EAAD,CAAQZ,UAAU,4CAAlB,SACI,cAACU,EAAD,CAAOK,MAAO,EAAd,qBAEJ,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAACF,EAAD,CAASb,UAAU,sBAAnB,SAA0CF,EAAMkB,kBCL7CC,EANc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9B,OAAO,cAAC,EAAD,UACJC,YAAaD,EAAME,WCHhBV,EAAUC,IAAVD,MCkBOW,EAlBK,CAChB,CACIC,UAAWL,EACXG,OAAQ,CACJ,CACIG,KAAM,IACNC,OAAO,EACPF,UDLE,WAGd,OAAO,mCACH,cAAC,EAAD,CAAOP,MAAO,EAAd,0CCGI,CACIQ,KAAM,SACNC,OAAO,EACPF,UCdE,WACd,OAAO,+DCOLG,ERFUC,YACZ/C,EAAkBC,GAClBK,EACA0C,YACEC,YACEC,YAAiBjD,MQDzBkD,IAASC,OAIP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,eAAC,IAAD,CAAiB7C,QAASA,EAA1B,cACGuC,YAAaE,QAGlBW,SAASC,eAAe,SAO1B/C,EAAgBgD,QAAQC,M","file":"static/js/main.e7233122.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nconst createRootReducer = (history) => combineReducers({\n  router: connectRouter(history)\n})\n\nexport default createRootReducer","import { createHashHistory } from 'history'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport createRootReducer from './reducers'\n\nexport const history = createHashHistory()\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        // ... other middlewares ...\n      ),\n    ),\n  )\n\n  return store\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FC } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { Layout, Menu } from 'antd';\n\n// const { SubMenu } = Menu;\n\nconst { Sider } = Layout;\n\nconst ComSider: FC = (props) => {\n    let history = useHistory();\n\n    const handleClick = (e: any) => {\n        history.push(e.key)\n    };\n    return <Sider className=\"site-layout-background\">\n        <Menu\n            onClick={handleClick}\n            defaultSelectedKeys={['/']}\n            defaultOpenKeys={['sub1']}\n            mode=\"inline\"\n        >\n            <Menu.ItemGroup key=\"g1\">\n                <Menu.Item key=\"/\">首页</Menu.Item>\n                <Menu.Item key=\"/babel\">babel</Menu.Item>\n            </Menu.ItemGroup>\n        </Menu>\n    </Sider>\n};\n\n\nexport default ComSider","import { FC } from 'react'\nimport { Layout, Typography } from 'antd';\nimport ComSider from '../sider'\nimport './index.less'\n\nconst { Title } = Typography;\n\nconst { Header, Content } = Layout;\n\nconst ComLayout: FC = (props) => {\n    return <Layout className=\"site-layout\">\n        <Header className=\"site-layout_header site-layout-background\">\n            <Title level={3}>vu-ji</Title>\n        </Header>\n        <Layout>\n            <ComSider />\n            <Content className=\"site-layout_content\">{props.children}</Content>\n        </Layout>\n    </Layout>\n};\n\n\nexport default ComLayout","import { FC } from 'react'\nimport './App.less';\nimport { renderRoutes, RouteConfig } from 'react-router-config'\nimport MyLayout from './components/layout'\n\nconst App: FC<RouteConfig> = ({ route }) => {\n  return <MyLayout>\n    {renderRoutes(route.routes)}\n  </MyLayout>\n}\n\nexport default App;","import { FC } from 'react'\nimport { Typography } from 'antd';\n\n// const { Title, Paragraph, Text } = Typography;\nconst { Title } = Typography;\n\nconst Index: FC = () => {\n    // const [ellipsis, setEllipsis] = React.useState(true);\n\n    return <>\n        <Title level={2}>首页内容</Title>\n        {/* <Title level={2}>h2.h2 title</Title>\n        <Switch\n            checked={ellipsis}\n            onChange={() => {\n                setEllipsis(!ellipsis);\n            }}\n        />\n\n        <Paragraph ellipsis={ellipsis}>\n        Ant Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team.\n        </Paragraph>\n\n        <Paragraph ellipsis={ellipsis ? { rows: 2, expandable: true, symbol: 'more' } : false}>\n        Ant Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team. Ant\n        Design, a design language for background applications, is refined by Ant UED Team.\n        </Paragraph>\n\n        <Text\n        style={ellipsis ? { width: 100 } : undefined}\n        ellipsis={ellipsis ? { tooltip: 'I am ellipsis now!' } : false}\n        >\n        Ant Design, a design language for background applications, is refined by Ant UED Team.\n        </Text> */}\n    </>\n}\n\nexport default Index","import App from './App'\nimport Index from './pages/index'\nimport Babel from './pages/babel'\n\nconst routeConfig = [\n    {\n        component: App,\n        routes: [\n            {\n                path: '/',\n                exact: true,\n                component: Index\n            },\n            {\n                path: '/babel',\n                exact: true,\n                component: Babel\n            }\n        ]\n    }\n]\n\nexport default routeConfig","import React, { FC } from 'react'\n\nconst Babel: FC = () => {\n    return <>\n        this is babel page\n    </>\n}\n\nexport default Babel","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.less';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { renderRoutes } from 'react-router-config'\nimport configureStore, { history } from './redux/configureStore'\nimport reportWebVitals from './reportWebVitals';\nimport routeConfig from './router'\n\nconst store = configureStore(/* provide initial state if any */)\n\nReactDOM.render(\n  // <HashRouter>\n  //   {renderRoutes(routeConfig)}\n  // </HashRouter>,\n  <Provider store={store}>\n    <ConnectedRouter history={history}> { /* place ConnectedRouter under Provider */ }\n      {renderRoutes(routeConfig)}\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n// ReactDOM.render(<Router routes={routeConfig} />, document.body)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}